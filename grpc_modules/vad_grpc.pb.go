// vad.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/vad.proto

package vad_application

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VADService_ProcessAudio_FullMethodName = "/vad.VADService/ProcessAudio"
	VADService_ResetVAD_FullMethodName     = "/vad.VADService/ResetVAD"
)

// VADServiceClient is the client API for VADService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VAD service definition
type VADServiceClient interface {
	// Process streaming audio and get VAD events
	ProcessAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, VADResponse], error)
	// Reset VAD state
	ResetVAD(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
}

type vADServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVADServiceClient(cc grpc.ClientConnInterface) VADServiceClient {
	return &vADServiceClient{cc}
}

func (c *vADServiceClient) ProcessAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, VADResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VADService_ServiceDesc.Streams[0], VADService_ProcessAudio_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AudioChunk, VADResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VADService_ProcessAudioClient = grpc.BidiStreamingClient[AudioChunk, VADResponse]

func (c *vADServiceClient) ResetVAD(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, VADService_ResetVAD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VADServiceServer is the server API for VADService service.
// All implementations must embed UnimplementedVADServiceServer
// for forward compatibility.
//
// VAD service definition
type VADServiceServer interface {
	// Process streaming audio and get VAD events
	ProcessAudio(grpc.BidiStreamingServer[AudioChunk, VADResponse]) error
	// Reset VAD state
	ResetVAD(context.Context, *ResetRequest) (*ResetResponse, error)
	mustEmbedUnimplementedVADServiceServer()
}

// UnimplementedVADServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVADServiceServer struct{}

func (UnimplementedVADServiceServer) ProcessAudio(grpc.BidiStreamingServer[AudioChunk, VADResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessAudio not implemented")
}
func (UnimplementedVADServiceServer) ResetVAD(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetVAD not implemented")
}
func (UnimplementedVADServiceServer) mustEmbedUnimplementedVADServiceServer() {}
func (UnimplementedVADServiceServer) testEmbeddedByValue()                    {}

// UnsafeVADServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VADServiceServer will
// result in compilation errors.
type UnsafeVADServiceServer interface {
	mustEmbedUnimplementedVADServiceServer()
}

func RegisterVADServiceServer(s grpc.ServiceRegistrar, srv VADServiceServer) {
	// If the following call pancis, it indicates UnimplementedVADServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VADService_ServiceDesc, srv)
}

func _VADService_ProcessAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VADServiceServer).ProcessAudio(&grpc.GenericServerStream[AudioChunk, VADResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VADService_ProcessAudioServer = grpc.BidiStreamingServer[AudioChunk, VADResponse]

func _VADService_ResetVAD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VADServiceServer).ResetVAD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VADService_ResetVAD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VADServiceServer).ResetVAD(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VADService_ServiceDesc is the grpc.ServiceDesc for VADService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VADService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vad.VADService",
	HandlerType: (*VADServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResetVAD",
			Handler:    _VADService_ResetVAD_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessAudio",
			Handler:       _VADService_ProcessAudio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/vad.proto",
}
